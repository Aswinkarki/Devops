
# version: "3.9"

# services:
#   db:
#     image: postgres:13
#     container_name: postgres_db
#     environment:
#       POSTGRES_DB: Library
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: Aswin
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U lms_user"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   api:
#     build:
#       context: ..
#       dockerfile: devOps/Dockerfile.backend
#     container_name: lms_api
#     volumes:
#       - ../LMS:/app
#     ports:
#       - "8000:8000"
#     environment:
#       - DJANGO_SETTINGS_MODULE=myproject.settings
#       - DB_NAME=Library
#       - DB_USER=postgres
#       - DB_PASSWORD=Aswin
#       - DB_HOST=db
#       - DB_PORT=5432
#     depends_on:
#       db:
#         condition: service_healthy
#     command: >
#       sh -c "python manage.py migrate &&
#              python manage.py runserver 0.0.0.0:8000"

#   frontend:
#     image: node:18-alpine
#     container_name: lms_frontend
#     working_dir: /app
#     volumes:
#       - ../LMS-React/frontend:/app
#     command: sh -c "npm install && npm run build"
#     environment:
#       - NODE_ENV=production

#   nginx:
#     image: nginx:stable
#     container_name: nginx_gateway
#     ports:
#       - "80:80"
#     depends_on:
#       - api
#       - frontend
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro
#       - ../LMS-React/frontend/dist:/usr/share/nginx/html

# volumes:
#   postgres_data:

version: "3.9"

services:
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: Library
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Aswin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      lms_net:
        ipv4_address: 172.22.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: devOps/Dockerfile.backend
    container_name: lms_api
    volumes:
      - ../LMS/myproject:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=myproject.settings
      - DB_NAME=Library
      - DB_USER=postgres
      - DB_PASSWORD=Aswin
      - DB_HOST=db
      - DB_PORT=5432
    networks:
      lms_net:
        ipv4_address: 172.22.0.3
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  frontend:
    build:
      context: ../LMS-React/frontend
      dockerfile: Dockerfile.web
    container_name: lms_frontend
    working_dir: /app
    command: sh -c "npm install && npm run build"
    networks:
      lms_net:
        ipv4_address: 172.22.0.4
    volumes:
      - ../LMS-React/frontend/dist:/app/dist
    depends_on:
      api:
        condition: service_healthy

  nginx:
    image: nginx:stable
    container_name: nginx_gateway
    ports:
      - "80:80"
    networks:
      lms_net:
        ipv4_address: 172.22.0.5
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../LMS-React/frontend/dist:/usr/share/nginx/html
    depends_on:
      - api
      - frontend

volumes:
  postgres_data:

networks:
  lms_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
